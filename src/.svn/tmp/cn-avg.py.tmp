#!/usr/bin/env python

import sys
import argparse
import cPickle as pickle

import cnavg.preprocess.vcf as vcf
import cnavg.preprocess.bambam as bambam

import cnavg.avg.balanced as balancedAVG
import cnavg.cactus.graph as cactus
import cnavg.cactusSampling.sampling as normalized
import cnavg.cactus.oriented as oriented
import cnavg.cactus.balanced as balancedCactus
import cnavg.cycleSampling.cycleCover as cycleCover
import cnavg.cycleSampling.sampleGraphCycles as sampleGraphCycles

def parseOptions():
	print "Parsing options"

	parser = argparse.ArgumentParser(description="Process a VCF files to sample possible historical explanations")
	parser.add_argument('--vcf', '-v', dest='vcffile', type=file, nargs=1, help='A VCF (ver >= 4.1) file')
	parser.add_argument('--bambam', '-b', dest='bambam', type=file, nargs='*', help='A BamBam file')
	parser.add_argument('--cactus', '-c', dest='cactus', type=file, nargs=1, help='A pickled Cactus graph')
	parser.add_argument('--toCactus', '-t', dest='toCactus', type=argparse.FileType('wb'), nargs=1, help='File to dump Cactus graph in')
	parser.add_argument('--breaks', '-k', dest='breaks', type=file, nargs=1, help='A BamBam breaks file')
	parser.add_argument('--lengths', '-l', dest='chromLengths', type=file, nargs=1, help='Chromosome lengths')
	return parser.parse_args()

def parseGraph(options):
	print "Parsing input files"

	if options.bambam is not None and options.breaks is not None and options.chromLengths is not None:
		breakends = bambam.parse(options.bambam, options.breaks, options.chromLengths)
	elif options.vcffile is not None and options.chromLengths is not None:
		breakends = vcf.parse(options.vcffile, options.chromLengths)
	else:
		if options.vcffile is None:
			print "No VCF"
		else:
			print "VCF: %s" % options.vcffile

		if options.chromLengths is None:
			print "No chromosome lengths"
		else:
			print "Chromosome lengths: %s" % options.chromLengths

		if options.bambam is None:
			print "No BamBam files"
		else:
			print "BamBam files: %s" % options.bambam

		if options.breaks is None:
			print "No BamBam break file"
		else:
			print "Breaks lengths: %s" % options.breaks

		sys.exit("Not enough files")

	return breakends.avg()

def main():
	options = parseOptions()

	if options.cactus is None:
		## Initial graph construction
		G = parseGraph(options)
		B = balancedAVG.BalancedAVG(G)
		C = cactus.Cactus(B)
		if options.toCactus is not None:
			pickle.dump(C, options.toCactus[0])
	else:
		## Just moving from there 
		C = pickle.load(options.cactus[0])

	## Sampling stuff
	NC = normalized.NormalizedCactus(C)
	BC = balancedCactus.BalancedCactus(NC)
	OC = oriented.OrientedCactus(BC)

	# Moving into historical space
	H = cycleCover.initialHistory(OC)
	SH = sampleGraphCycles.sample(H)
	
	# Output
	print map(lambda X: X.rearrangementCost, SH)

if __name__ == "__main__":
	main()

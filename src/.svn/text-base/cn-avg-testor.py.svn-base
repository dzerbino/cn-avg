#!/usr/bin/env python

import sys

import cnavg.simulator.simulator as simulator
import cnavg.avg.balanced as balancedAVG
import cnavg.cactus.graph as cactus
import cnavg.cactusSampling.sampling as normalized
import cnavg.cactus.oriented as oriented
import cnavg.cactus.balanced as balancedCactus
import cnavg.historySampling.cycleCover as cycleCover
import cnavg.historySampling.sampleGraphCycles as sampleGraphCycles


import cnavg.history.debug
cnavg.history.debug.DEBUG = True
cnavg.history.debug.PLOIDY = 1


def _sampleAVG(avg, size):
	""" Simplified pipeline """
	C = cactus.Cactus(avg)
	NC = normalized.NormalizedCactus(C)
	OC = oriented.OrientedCactus(NC)
	H = cycleCover.initialHistory(OC)
	return sampleGraphCycles.sample(H, size)

def _compareHistories(realHistory, sampledHistories):
	""" Reporting """
	X = map(lambda X: X.rearrangementCost(), sampledHistories)
	m = min(X)
	return realHistory.cost(), m, len(filter(lambda x : x == m, X)), X

def testHistory(length, maxDepth, iterations):
	"""Tests the efficiency of the CN-AVG pipeline on random evolutionary histories"""
	realHistory = simulator.RandomWeightedHistory(length, maxDepth)
	sampledHistories = _sampleAVG(realHistory.avg(), iterations)
	return "\t".join(map(str, _compareHistories(realHistory, sampledHistories)))

def main():
	print "\n".join([testHistory(100, 10, 100) for X in range(100)])

if __name__ == "__main__":
	main()

#!/usr/bin/env python

import cnavg.avg.graph as avg
import copy

"""Definition of Group"""

###########################################
## Group structure 
###########################################

class Group(object):
	"""A group in a cactus graph, i.e. a connected component of bonds"""
	def __init__(self, iter):
		self.nodes = frozenset(iter)

	def __iter__(self):
		return iter(self.nodes)

	def __str__(self):
		return str(min(self))

	def dot(self, netID, groupID):
		""" GraphViz representation """
		return "\n".join(['\n\t\tsubgraph cluster%i_%i {' % (netID, groupID)]
		                + map(lambda X: "\t\t" + str(X.ID), sorted(self.nodes))
				+ ['\t\t}'])

	def validate(self, graph):
		""" Validation function """
		assert all((graph.nodeGroup[X] == self for X in self.nodes))
		return True

	def nodeCount(self):
		""" Count nodes in group """
		return len(self.nodes)

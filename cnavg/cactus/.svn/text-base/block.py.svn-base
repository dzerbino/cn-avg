#!/usr/bin/env python

import cnavg.avg.graph as avg
import copy
import threeWay.components

from cnavg.cactus.group import Group
 
"""Definition of Block"""

###########################################
## Block structure 
###########################################
class Block(object):
	"""Cactus graph block, i.e. a segment edge"""
	def __init__(self, nodeA, nodeB, graph):
		self.nodes = frozenset([nodeA, nodeB])

	def __str__(self):
		return "[" + ";".join(map(str, self.nodes)) + "]"

	def __cmp__(self, other):
		# Note: actually hacky
		return cmp(min(self.nodes), min(other.nodes))

	def length(self):
		nodes = list(self.nodes)
		if nodes[0] > nodes[1]:
			return nodes[0] - nodes[1]
		else:
			return nodes[1] - nodes[0]

	def copynumber(self, cactus, index):
		return cactus[list(self.nodes)[0]].segment[index]

	def ploidy(self, cactus):
		return len(cactus[list(self.nodes)[0]].segment)

	def otherNode(self, node):
		assert node in self.nodes
		nodeA, nodeB = self.nodes
		if nodeA == node:
			return nodeB
		else:
			return nodeA

	def validate(self, graph):
		nodeA, nodeB = self.nodes
		assert graph.nodeBlock[nodeA] == self
		assert graph.nodeBlock[nodeB] == self
		assert nodeA.orientation != nodeB.orientation
		return True
